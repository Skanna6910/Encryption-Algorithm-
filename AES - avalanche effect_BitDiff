# -*- coding: utf-8 -*-
"""Homework4.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1d30k5NJJQ7gEDGlxFZ1LbHBixolZBN-C
"""
UID='118406473'
First_Name='Suprajha'
Last_Name='Kanna'
from Crypto.Cipher import AES
#from Crypto.Cipher import DES
from Crypto.Util.Padding import pad, unpad
from bitstring import BitArray
def padding(ib,size):
  if(len(ib)<size):
     ib = pad(ib, size) 
     return ib
block=16
def AESEncryptn(ib, k):
  ib = padding(ib,16) 
  cipher = AES.new(k, AES.MODE_ECB)
 #print(len(ib)) 
  CT = cipher.encrypt(ib) 
  return CT
def AESDecryptn(ib, k):
  decipher = AES.new(k, AES.MODE_ECB)
  PT =unpad(decipher.decrypt(ib),block)
  return PT
#def des_enc(inputblock, key):
  #inputblock = padding(inputblock,8) 
  #des_enc = DES.new(key, DES.MODE_ECB)
  #print(len(inputblock)) 
  #cipher_text = des_enc.encrypt(inputblock) 
  #return cipher_text
  
def invertbit(ib, b):
  bin_inputblock = [a for a in (''.join([bin(int(b))[2:].zfill(8) for b in 
ib]).zfill(16))]
  if bin_inputblock[b] == '1':
    bin_inputblock[b]='0'
  else:
    bin_inputblock[b]='1'
  new_bin_inputblock = [''.join(bin_inputblock[i:i+8]) for i in 
range(0,len(bin_inputblock), 8)]
  lst = [ int(i, base=2) for i in new_bin_inputblock]
  return bytes(lst)
  
def findbitdiff(originalcipher, newcipher):
  orgcipher_L = ''.join([a for a in (''.join([bin(int(b))[2:].zfill(8) for b in 
originalcipher]).zfill(16))])
  nwcipher_L = ''.join([a for a in (''.join([bin(int(b))[2:].zfill(8) for b in 
newcipher]).zfill(16))])
  d = int(orgcipher_L, 2)^int(nwcipher_L,2)
  db= bin(d)[2:].zfill(len(nwcipher_L))
  dn = list(db).count("1")
  return dn
  
def aes_input_av_test(ib, k, bitlist):
    ##print(pad_ib)
    diff_list = []
    originalcipher = AESEncryptn(ib, k)
   # print(originalcipher)
    
    for b in bitlist:
        ni = invertbit(ib, b)
        newcipher = AESEncryptn(ni, k) 
        numbitdifferences = findbitdiff(originalcipher, newcipher)
        diff_list.append(numbitdifferences)
    return diff_list
def aes_key_av_test(ib, k, bitlist):
   # print(pad_ib)
    diff_list = []
    originalcipher = AESEncryptn(ib, k)
    for b in bitlist:
        newinput = invertbit(k, b)
        newcipher = AESEncryptn(ib, newinput)
        numbitdifferences = findbitdiff(originalcipher, newcipher)
        diff_list.append(numbitdifferences)
    return diff_list
    
if __name__ == "__main__":
  ib= b'isthis16bytes?'
  k=b'veryverylongkey!'
  bitlist=[5, 29, 38]
  aes_input_av_test_string=aes_input_av_test(ib, k, bitlist)
  print(aes_input_av_test_string)
  aes_key_av_test_string=aes_key_av_test(ib, k, bitlist)
  print(aes_key_av_test_string)
